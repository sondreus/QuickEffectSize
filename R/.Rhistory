set.seed(1010)
n=1000;p=100
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta=rnorm(nzc)
fx= x[,seq(nzc)] %*% beta
eps=rnorm(n)*5
y=drop(fx+eps)
px=exp(fx)
px=px/(1+px)
ly=rbinom(n=length(px),prob=px,size=1)
set.seed(1011)
cvob1=cv.glmnet(x,y)
library(glmnet)
set.seed(1010)
n=1000;p=100
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta=rnorm(nzc)
fx= x[,seq(nzc)] %*% beta
eps=rnorm(n)*5
y=drop(fx+eps)
px=exp(fx)
px=px/(1+px)
ly=rbinom(n=length(px),prob=px,size=1)
set.seed(1011)
library(glmnet)
cvob1=cv.glmnet(x,y)
cv.glmnet <- cvob1
replay = FALSE
plot.cv = TRUE
total.time = ifelse(plot.cv, 15, 10)
new.save = TRUE
save = "html"
debug = FALSE
debug.n = 10
captions = FALSE
alt.captions = FALSE
transition.n = 10
library(animation)
library(ggplot2)
# Debug
if(debug == TRUE){
cv.glmnet <- cv.glmnet(x, y, nfolds = 20, lambda = sample(cv.glmnet$lambda, debug.n))
}
if(class(cv.glmnet) != "cv.glmnet"){
message("Please supply an object of class cv.glmnet")
stop()
}
cv.folds <- 10
ymax <-   100 * 1.2
ymin <- - 100 * 1.2
lambda.min <- which(cv.glmnet$glmnet.fit$lambda == cv.glmnet$lambda.min)
itr <- length(cv.glmnet$lambda)
itr
lambda.min
ymax <-   100 * 1.2
ymin <- - 100 * 1.2
lambda.min <- which(cv.glmnet$glmnet.fit$lambda == cv.glmnet$lambda.min)
itr <- length(cv.glmnet$lambda)
# Getting number of possible coefficients
n <- nrow(coef(cv.glmnet$glmnet.fit)[-1, ])
if(plot.cv == TRUE){
total.frames <- itr*2
} else {
total.frames <- itr
}
wait.time <- total.time/total.frames
suppressMessages(oopt <- ani.options(nmax = total.frames, interval = wait.time))
ani.record(reset = TRUE)
# Define Percentile Function
percentile <- function (dat)
{
pt1 <- quantile(dat, probs = seq(0, 1, by = 0.01), type = 7)
pt2 <- unique(as.data.frame(pt1), fromLast = TRUE)
pt3 <- rownames(pt2)
pt4 <- as.integer(strsplit(pt3, "%"))
datp <- pt4[as.integer(cut(dat, c(0, pt2$pt1), labels = 1:length(pt3)))]
return(datp)
}
# Get cross-validation error
cvm <- rev((cv.glmnet$cvm - min(cv.glmnet$cvm))^.2)
cvm <- cvm/max((cv.glmnet$cvm - min(cv.glmnet$cvm))^.2)
cvm.df <- cbind.data.frame(cvm = cvm, xpos = n*((1:itr)/itr))
cvm.df$cvm <- (cvm.df$cvm)*0.15*ymax + ymax*.80
cvm.df$cvm.ymax <- ymax
cvm.min.coefs <- as.numeric(coef(cv.glmnet$glmnet.fit, s = cv.glmnet$lambda[lambda.min])[-1])
if(length(cvm.min.coefs[cvm.min.coefs > 0]) > 0){cvm.min.coefs[cvm.min.coefs > 0] <- percentile(cvm.min.coefs[cvm.min.coefs > 0]) }
if(length(cvm.min.coefs[cvm.min.coefs < 0]) > 0){cvm.min.coefs[cvm.min.coefs < 0] <- - percentile( - cvm.min.coefs[cvm.min.coefs < 0]) }
# Constructing matrix of coefficient values and mapping these to their percentiles
coef.values <- data.frame()
plot.n <- n
i <- 1
coef.values <- rbind(coef.values, cbind.data.frame(label = paste("Coefficient", 1:plot.n), value = as.numeric(coef(cv.glmnet$glmnet.fit, s=rev(cv.glmnet$lambda)[i])[-1]), coef.number = 1:plot.n))
for(i in 1:itr){
coef.values <- rbind(coef.values, cbind.data.frame(label = paste("Coefficient", 1:plot.n), value = as.numeric(coef(cv.glmnet$glmnet.fit, s=rev(cv.glmnet$lambda)[i])[-1]), coef.number = 1:plot.n))
}
if(length(coef.values$value[coef.values$value > 0]) > 0){coef.values$value[coef.values$value > 0] <- percentile(coef.values$value[coef.values$value > 0]) }
if(length(coef.values$value[coef.values$value < 0]) > 0){coef.values$value[coef.values$value < 0] <- - percentile( - coef.values$value[coef.values$value < 0]) }
##
# Generate animation
##
index <- 1
pb <- txtProgressBar(min = 0, max = total.frames, style = 3)
plot.data <- coef.values[(1:plot.n) + plot.n * (i - 1), ]
p1 <- ggplot(plot.data, aes(y=value, x=coef.number)) + coord_polar(start = 0, direction = 1)
p1
# Adding shadows of previous previous fit
if(i > 2){
p1 <- p1 + geom_polygon(aes(y=old_old_value, x=plot.data$coef.number), fill = NA, alpha = 0.3, color = "gray")
}
# Adding shadows of previous fit
if(i > 1){
p1 <- p1 + geom_polygon(aes(y=old_value, x=plot.data$coef.number), fill = NA, alpha = 0.6, color = "gray")
old_old_value <- old_value
}
p1 <- p1 + geom_polygon(aes(y=value + ifelse(plot.data$value == 0, 0, ifelse(plot.data$value > 0, 0.1*ymax, -0.1*ymax))), fill = NA, alpha=0.7, color = "black")+theme_bw()+geom_segment(aes(x=max(coef.number)*(i/itr)), xend=0, yend = ymax, y=ymax, size = 2, col = "skyblue", alpha=0.3)+xlab("")+ylab("")+geom_segment(aes(y=value, xend=coef.number), yend=0, color = ifelse(plot.data$value > 0, "darkgreen", "skyblue"))+theme(plot.caption = element_text(hjust=0.5, size=rel(2)), axis.text.x = element_blank(), axis.text.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank())+ylim(ymin*1.1, ymax*1.1)+xlim(0, plot.n)
p1
i
i <- 1
plot.data <- coef.values[(1:plot.n) + plot.n * (i - 1), ]
p1 <- ggplot(plot.data, aes(y=value, x=coef.number)) + coord_polar(start = 0, direction = 1)
# Adding shadows of previous previous fit
if(i > 2){
p1 <- p1 + geom_polygon(aes(y=old_old_value, x=plot.data$coef.number), fill = NA, alpha = 0.3, color = "gray")
}
# Adding shadows of previous fit
if(i > 1){
p1 <- p1 + geom_polygon(aes(y=old_value, x=plot.data$coef.number), fill = NA, alpha = 0.6, color = "gray")
old_old_value <- old_value
}
p1 <- p1 + geom_polygon(aes(y=value + ifelse(plot.data$value == 0, 0, ifelse(plot.data$value > 0, 0.1*ymax, -0.1*ymax))), fill = NA, alpha=0.7, color = "black")+theme_bw()+geom_segment(aes(x=max(coef.number)*(i/itr)), xend=0, yend = ymax, y=ymax, size = 2, col = "skyblue", alpha=0.3)+xlab("")+ylab("")+geom_segment(aes(y=value, xend=coef.number), yend=0, color = ifelse(plot.data$value > 0, "darkgreen", "skyblue"))+theme(plot.caption = element_text(hjust=0.5, size=rel(2)), axis.text.x = element_blank(), axis.text.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank())+ylim(ymin*1.1, ymax*1.1)+xlim(0, plot.n)
p1
cvm.index <- 1
right.cvm.data <- cbind.data.frame(cve = cv.glmnet$cvm, cvsd = cv.glmnet$cvsd, lam = cv.glmnet$lambda)
right.cvm.data <- right.cvm.data[order(right.cvm.data$lam), ]
k <- 1
# Add CVM
cvm.temp <- cvm.df[1:min(k,nrow(cvm.df)), ]
suppressWarnings(
p2 <- p1 + geom_ribbon(data = cvm.temp, aes(x=xpos, xend=0, ymin=cvm, ymax=cvm.ymax, y= 0), fill = "deepskyblue", color = "deepskyblue")
)
if(cv.folds > 50){
plot.cv.folds.n <- 50
} else {
plot.cv.folds.n <- cv.folds
}
p3 <- p2 + geom_point(data = cbind.data.frame(x=((1:plot.cv.folds.n)*(plot.n/plot.cv.folds.n) - 0.5*(plot.n/plot.cv.folds.n)), y = -0.1*ymax), aes(x=x, y=y), shape = 23, color = "gray", size = 2, fill = "white")
p3 <- p3 + geom_point(data = cbind.data.frame(x=((sample(1:plot.cv.folds.n, 1))*(plot.n/plot.cv.folds.n) - 0.5*(plot.n/plot.cv.folds.n)), y = -0.1*ymax), aes(x=x, y=y), shape = 23, fill = "skyblue", color = "gray", size = 2)
p3
